plugins {
    id 'org.springframework.boot' version '2.0.1.RELEASE'
    id 'java'
}

apply plugin: 'java-library'
apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    testCompile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.0.3'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    runtime group: 'com.h2database', name: 'h2', version: '1.4.197'
    runtime "javax.activation:activation:1.1.1"
    runtime 'javax.xml.bind:jaxb-api'
    runtime "com.sun.xml.bind:jaxb-core:2.2.11"
    runtime "com.sun.xml.bind:jaxb-impl:2.2.11"
}

repositories {
    mavenCentral()
}

jar {
    enabled = true
}

bootJar {
    mainClassName = 'pl.piomin.services.gatling.ApiApplication'
}

task loadTest(type: JavaExec) {
   dependsOn testClasses
   description = "Load Test With Gatling"
   group = "Load Test"
   classpath = sourceSets.test.runtimeClasspath
   jvmArgs = [
        "-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}"
   ]
   main = "io.gatling.app.Gatling"
   args = [
           "--simulation", "pl.piomin.services.gatling.ApiGatlingSimulationTest",
           "--results-folder", "${buildDir}/gatling-results",
           "--binaries-folder", sourceSets.test.output.classesDir.toString(),
           "--bodies-folder", sourceSets.test.resources.srcDirs.toList().first().toString() + "/gatling/bodies",
   ]
}

task loadTest2(type: JavaExec) {
    dependsOn testClasses
    description = "Load Test With Gatling"
    group = "Load Test"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = [
            "-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}"
    ]
    main = "io.gatling.app.Gatling"
    args = [
            "--simulation", "pl.piomin.services.gatling.RecordedSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--binaries-folder", sourceSets.test.output.classesDir.toString(),
            "--bodies-folder", sourceSets.test.resources.srcDirs.toList().first().toString() + "/gatling/bodies",
    ]
}

